Progresive Web Apps
Crossbrowsing
HTML5 & semantica

====================== FLEXBOX ======================

====== { parent items } =======

{ display: flex; }

|| justify-content ||

flex-start: Items align to the left side of the container.
flex-end: Items align to the right side of the container.
center: Items align at the center of the container.
space-between: Items display with equal spacing between them.
space-around: Items display with equal spacing around them.

|| align-items ||

flex-start: Items align to the top of the container.
flex-end: Items align to the bottom of the container.
center: Items align at the vertical center of the container.
baseline: Items display at the baseline of the container.
stretch: Items are stretched to fit the container.

|| flex-direction ||

row: Items are placed the same as the text direction.
row-reverse: Items are placed opposite to the text direction.
column: Items are placed top to bottom.
column-reverse: Items are placed bottom to top.

|| flex-wrap ||
nowrap: Every item is fit to a single line.
wrap: Items wrap around to additional lines.
wrap-reverse: Items wrap around to additional lines in reverse.


====== { child items } =======

|| order ||
Integer: (..., -1, 0, 1, ...)

|| align-self ||
(Same as align items)
flex-start: Items align to the top of the container.
flex-end: Items align to the bottom of the container.
center: Items align at the vertical center of the container.
baseline: Items display at the baseline of the container.
stretch: Items are stretched to fit the container.




====================== GRID ======================
One of the things that sets CSS grids apart from flexbox 
is that you can easily position items in two dimensions

You can overlap elements
Order property to control display over the source code order.


====== { parent items } =======

|| grid-template-columns ||
ej: grid-template-columns: 20% 20% 20% 20% 20%;

|| grid-template-rows ||
ej: grid-template-rows: 20% 20% 20% 20% 20%;

SHORT HAND MULTIPLE VALUES: repeat(5, 20%);
SHORT HAND: ej, grid-template: 50% 50% / 200px; 
CUSTOM VALUE: 100px 3em 40%;
FRACTIONS: 1fr 5fr; (divides 1/6 and 5/6)

====== { child items } =======

{ display: grid; }

|| grid-column-start ||
Integer: (..., -1, 0, 1, ...)

|| grid-column-end ||
Integer: (..., -1, 0, 1, ...)

|| grid-column ||
Short hand of grid-column-start / grid-column-end

grid-column: 2 / 4; 

(SAME AS COLUMN BUT ROW)
|| grid-row-start ||
Integer: (..., -1, 0, 1, ...)

|| grid-row-end ||
Integer: (..., -1, 0, 1, ...)

|| grid-row ||
Short hand of grid-column-start / grid-column-end

grid-column: 2 / 4; 



|| grid-area ||
Short hand for grid-column / grid-row

grid-row-start / grid-column-start / grid-row-end / grid-column-end



|| order ||
Integer: (..., -1, 0, 1, ...)














